{"ast":null,"code":"import _objectSpread from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ashitosh/mineapp/mine3/src/components/login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinner\";\nimport { connect } from \"react-redux\";\nimport Input from \"../UI/Input/Input\";\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.onSubmitLogin = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      console.log(_this.state.orderForm); // if (!this.props.authState.email || !this.props.authState.password) {\n\n      if (!_this.state.orderForm.email.value || !_this.props.orderForm.password.value) {\n        return _this.setState({\n          error: {\n            message: \"Please enter required details\"\n          },\n          loading: false\n        });\n      }\n\n      _this.loginAction();\n    };\n\n    _this.loginAction =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.validateCredentials();\n\n            case 3:\n              _context.next = 5;\n              return _this.successfullLogin();\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                error: _context.t0,\n                loading: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    _this.state = {\n      error: \"\",\n      loading: false,\n      orderForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            name: \"email\",\n            placeholder: \"Username\"\n          },\n          value: \"\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\"\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        loading: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"validateCredentials\",\n    value: function validateCredentials() {\n      return fire.auth().signInWithEmailAndPassword( // this.props.authState.email,\n      // this.props.authState.password\n      this.state.orderForm.email.value, this.state.orderForm.password.value);\n    }\n  }, {\n    key: \"successfullLogin\",\n    value: function successfullLogin() {\n      // localStorage.setItem(\"authUser\", this.props.authState.email);\n      localStorage.setItem(\"authUser\", this.state.orderForm.email.value);\n      this.setState({\n        loading: false\n      }); // if (localStorage.getItem(\"authUser\")) {\n      //   this.props.setIsAuthorised(true);\n      // }\n\n      this.props.history.push(\"/\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var _this$state = this.state,\n          error = _this$state.error,\n          loading = _this$state.loading; // let loginPage = (\n      //   <div\n      //     style={{\n      //       width: \"100%\",\n      //       height: \"100%\",\n      //       borderRadius: \"5px\",\n      //       justifyContent: \"center\"\n      //     }}\n      //   >\n      //     <form>\n      //       <div\n      //         style={{\n      //           width: \"40%\",\n      //           marginTop: \"50px\",\n      //           background: \"gray\",\n      //           borderRadius: \"5px\",\n      //           alignContent: \"center\",\n      //           justifyContent: \"center\",\n      //           marginLeft: \"30%\",\n      //           color: \"white\"\n      //         }}\n      //       >\n      //         <br />\n      //         <h3>\n      //           <strong>Login Page</strong>\n      //         </h3>\n      //         {error ? (\n      //           <div>\n      //             <p style={{ color: \"red\" }}>{error.message}</p>\n      //           </div>\n      //         ) : null}\n      //         <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n      //             Email :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"email\"\n      //             placeholder=\" Email\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n      //             password :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"password\"\n      //             placeholder=\" Password\"\n      //             // value={this.props.authState.password}\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <button\n      //             style={{\n      //               width: \"70px\",\n      //               borderRadius: \"5px\",\n      //               background: \"green\",\n      //               borderStyle: \"none\",\n      //               padding: \"5px\",\n      //               color: \"white\"\n      //             }}\n      //             onClick={this.onSubmitLogin}\n      //           >\n      //             Login\n      //           </button>\n      //           <br />\n      //           or <br />\n      //           Do\n      //           <Link to={\"/register\"}> Register </Link>\n      //           here.\n      //         </div>\n      //         <br />\n      //       </div>\n      //     </form>\n      //   </div>\n      // );\n\n      var loginPage = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"Login Page\")), error ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, error.message)) : null, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 218\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        style: {\n          width: \"70px\",\n          borderRadius: \"5px\",\n          background: \"green\",\n          borderStyle: \"none\",\n          padding: \"5px\",\n          color: \"white\"\n        },\n        onClick: this.onSubmitLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }, \"Login\"));\n\n      if (loading) {\n        loginPage = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, loginPage);\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authState: state.authState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onInputChange: function onInputChange(e) {\n      return dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      });\n    } //   ,\n    // setIsAuthorised: status => dispatch({ type: \"onSetAuthorise\", status })\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/ashitosh/mineapp/mine3/src/components/login.js"],"names":["React","Component","Fragment","fire","Link","Spinner","connect","Input","Login","props","onSubmitLogin","e","preventDefault","setState","loading","console","log","state","orderForm","email","value","password","error","message","loginAction","validateCredentials","successfullLogin","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","elementType","elementConfig","type","name","placeholder","auth","signInWithEmailAndPassword","localStorage","setItem","history","push","formElementsArray","key","id","config","loginPage","orderHandler","color","map","formElement","width","borderRadius","background","borderStyle","padding","mapStateToProps","authState","mapDispatchToProps","dispatch","onInputChange"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinner\";\nimport { connect } from \"react-redux\";\nimport Input from \"../UI/Input/Input\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n      loading: false,\n      orderForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            name: \"email\",\n            placeholder: \"Username\"\n          },\n          value: \"\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\"\n        }\n      }\n    };\n  }\n\n  onSubmitLogin = e => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true\n    });\n    console.log(this.state.orderForm);\n    // if (!this.props.authState.email || !this.props.authState.password) {\n    if (\n      !this.state.orderForm.email.value ||\n      !this.props.orderForm.password.value\n    ) {\n      return this.setState({\n        error: { message: \"Please enter required details\" },\n        loading: false\n      });\n    }\n\n    this.loginAction();\n  };\n\n  componentWillMount() {\n    this.setState({\n      loading: true\n    });\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  validateCredentials() {\n    return fire.auth().signInWithEmailAndPassword(\n      // this.props.authState.email,\n      // this.props.authState.password\n      this.state.orderForm.email.value,\n      this.state.orderForm.password.value\n    );\n  }\n  successfullLogin() {\n    // localStorage.setItem(\"authUser\", this.props.authState.email);\n    localStorage.setItem(\"authUser\", this.state.orderForm.email.value);\n    this.setState({\n      loading: false\n    });\n\n    // if (localStorage.getItem(\"authUser\")) {\n    //   this.props.setIsAuthorised(true);\n    // }\n\n    this.props.history.push(\"/\");\n  }\n\n  loginAction = async () => {\n    try {\n      await this.validateCredentials();\n      await this.successfullLogin();\n    } catch (e) {\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    this.setState({ orderForm: updatedOrderForm });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    const { error, loading } = this.state;\n\n    // let loginPage = (\n    //   <div\n    //     style={{\n    //       width: \"100%\",\n    //       height: \"100%\",\n    //       borderRadius: \"5px\",\n    //       justifyContent: \"center\"\n    //     }}\n    //   >\n    //     <form>\n    //       <div\n    //         style={{\n    //           width: \"40%\",\n    //           marginTop: \"50px\",\n    //           background: \"gray\",\n    //           borderRadius: \"5px\",\n    //           alignContent: \"center\",\n    //           justifyContent: \"center\",\n    //           marginLeft: \"30%\",\n    //           color: \"white\"\n    //         }}\n    //       >\n    //         <br />\n    //         <h3>\n    //           <strong>Login Page</strong>\n    //         </h3>\n    //         {error ? (\n    //           <div>\n    //             <p style={{ color: \"red\" }}>{error.message}</p>\n    //           </div>\n    //         ) : null}\n    //         <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n    //             Email :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"email\"\n    //             placeholder=\" Email\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n    //             password :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"password\"\n    //             placeholder=\" Password\"\n    //             // value={this.props.authState.password}\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <button\n    //             style={{\n    //               width: \"70px\",\n    //               borderRadius: \"5px\",\n    //               background: \"green\",\n    //               borderStyle: \"none\",\n    //               padding: \"5px\",\n    //               color: \"white\"\n    //             }}\n    //             onClick={this.onSubmitLogin}\n    //           >\n    //             Login\n    //           </button>\n    //           <br />\n    //           or <br />\n    //           Do\n    //           <Link to={\"/register\"}> Register </Link>\n    //           here.\n    //         </div>\n    //         <br />\n    //       </div>\n    //     </form>\n    //   </div>\n    // );\n\n    let loginPage = (\n      <form onSubmit={this.orderHandler}>\n        <h3>\n          <strong>Login Page</strong>\n        </h3>\n        {error ? (\n          <div>\n            <p style={{ color: \"red\" }}>{error.message}</p>\n          </div>\n        ) : null}\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        {/* <Button btnType=\"Success\">ORDER</Button> */}\n        <button\n          style={{\n            width: \"70px\",\n            borderRadius: \"5px\",\n            background: \"green\",\n            borderStyle: \"none\",\n            padding: \"5px\",\n            color: \"white\"\n          }}\n          onClick={this.onSubmitLogin}\n        >\n          Login\n        </button>\n      </form>\n    );\n\n    if (loading) {\n      loginPage = <Spinner />;\n    }\n\n    return <Fragment>{loginPage}</Fragment>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authState: state.authState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInputChange: e =>\n      dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      })\n    //   ,\n    // setIsAuthorised: status => dispatch({ type: \"onSetAuthorise\", status })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n"]},"metadata":{},"sourceType":"module"}