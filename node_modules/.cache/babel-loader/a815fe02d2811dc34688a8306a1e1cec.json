{"ast":null,"code":"import _objectSpread from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ashitosh/mineapp/mine3/src/components/login.js\";\nimport React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinner\";\nimport { connect } from \"react-redux\";\nimport Input from \"../UI/Input/Input\";\n\nvar Login =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Login, _Component);\n\n  function Login(props) {\n    var _this;\n\n    _classCallCheck(this, Login);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Login).call(this, props));\n\n    _this.onSubmitLogin = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      }); // if (!this.props.authState.email || !this.props.authState.password) {\n\n\n      if (!_this.props.authState.email || !_this.props.authState.password) {\n        orderForm;\n        return _this.setState({\n          error: {\n            message: \"Please enter required details\"\n          },\n          loading: false\n        });\n      }\n\n      _this.loginAction();\n    };\n\n    _this.loginAction =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.validateCredentials();\n\n            case 3:\n              _context.next = 5;\n              return _this.successfullLogin();\n\n            case 5:\n              _context.next = 10;\n              break;\n\n            case 7:\n              _context.prev = 7;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                error: _context.t0,\n                loading: false\n              });\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 7]]);\n    }));\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    _this.state = {\n      error: \"\",\n      loading: false,\n      orderForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            name: \"email\",\n            placeholder: \"Username\"\n          },\n          value: \"\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\"\n        }\n      }\n    };\n    return _this;\n  }\n\n  _createClass(Login, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        loading: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"validateCredentials\",\n    value: function validateCredentials() {\n      return fire.auth().signInWithEmailAndPassword(this.props.authState.email, this.props.authState.password);\n    }\n  }, {\n    key: \"successfullLogin\",\n    value: function successfullLogin() {\n      localStorage.setItem(\"authUser\", this.props.authState.email);\n      this.setState({\n        loading: false\n      }); // if (localStorage.getItem(\"authUser\")) {\n      //   this.props.setIsAuthorised(true);\n      // }\n\n      this.props.history.push(\"/\");\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      }\n\n      var _this$state = this.state,\n          error = _this$state.error,\n          loading = _this$state.loading; // let loginPage = (\n      //   <div\n      //     style={{\n      //       width: \"100%\",\n      //       height: \"100%\",\n      //       borderRadius: \"5px\",\n      //       justifyContent: \"center\"\n      //     }}\n      //   >\n      //     <form>\n      //       <div\n      //         style={{\n      //           width: \"40%\",\n      //           marginTop: \"50px\",\n      //           background: \"gray\",\n      //           borderRadius: \"5px\",\n      //           alignContent: \"center\",\n      //           justifyContent: \"center\",\n      //           marginLeft: \"30%\",\n      //           color: \"white\"\n      //         }}\n      //       >\n      //         <br />\n      //         <h3>\n      //           <strong>Login Page</strong>\n      //         </h3>\n      //         {error ? (\n      //           <div>\n      //             <p style={{ color: \"red\" }}>{error.message}</p>\n      //           </div>\n      //         ) : null}\n      //         <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n      //             Email :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"email\"\n      //             placeholder=\" Email\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n      //             password :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"password\"\n      //             placeholder=\" Password\"\n      //             // value={this.props.authState.password}\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <button\n      //             style={{\n      //               width: \"70px\",\n      //               borderRadius: \"5px\",\n      //               background: \"green\",\n      //               borderStyle: \"none\",\n      //               padding: \"5px\",\n      //               color: \"white\"\n      //             }}\n      //             onClick={this.onSubmitLogin}\n      //           >\n      //             Login\n      //           </button>\n      //           <br />\n      //           or <br />\n      //           Do\n      //           <Link to={\"/register\"}> Register </Link>\n      //           here.\n      //         </div>\n      //         <br />\n      //       </div>\n      //     </form>\n      //   </div>\n      // );\n\n      var loginPage = React.createElement(\"form\", {\n        onSubmit: this.orderHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 205\n        },\n        __self: this\n      }, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 207\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        style: {\n          width: \"70px\",\n          borderRadius: \"5px\",\n          background: \"green\",\n          borderStyle: \"none\",\n          padding: \"5px\",\n          color: \"white\"\n        },\n        onClick: this.onSubmitLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"Login\"));\n\n      if (loading) {\n        loginPage = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 233\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }, loginPage);\n    }\n  }]);\n\n  return Login;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    authState: state.authState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onInputChange: function onInputChange(e) {\n      return dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      });\n    } //   ,\n    // setIsAuthorised: status => dispatch({ type: \"onSetAuthorise\", status })\n\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","map":{"version":3,"sources":["/home/ashitosh/mineapp/mine3/src/components/login.js"],"names":["React","Component","Fragment","fire","Link","Spinner","connect","Input","Login","props","onSubmitLogin","e","preventDefault","setState","loading","authState","email","password","orderForm","error","message","loginAction","validateCredentials","successfullLogin","inputChangedHandler","event","inputIdentifier","updatedOrderForm","state","updatedFormElement","value","target","elementType","elementConfig","type","name","placeholder","auth","signInWithEmailAndPassword","localStorage","setItem","history","push","formElementsArray","key","id","config","loginPage","orderHandler","map","formElement","width","borderRadius","background","borderStyle","padding","color","mapStateToProps","mapDispatchToProps","dispatch","onInputChange"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport Spinner from \"../UI/Spinner\";\nimport { connect } from \"react-redux\";\nimport Input from \"../UI/Input/Input\";\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: \"\",\n      loading: false,\n      orderForm: {\n        email: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"email\",\n            name: \"email\",\n            placeholder: \"Username\"\n          },\n          value: \"\"\n        },\n        password: {\n          elementType: \"input\",\n          elementConfig: {\n            type: \"password\",\n            name: \"password\",\n            placeholder: \"Password\"\n          },\n          value: \"\"\n        }\n      }\n    };\n  }\n\n  onSubmitLogin = e => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true\n    });\n\n    // if (!this.props.authState.email || !this.props.authState.password) {\n    if (!this.props.authState.email || !this.props.authState.password) {\n      orderForm;\n      return this.setState({\n        error: { message: \"Please enter required details\" },\n        loading: false\n      });\n    }\n\n    this.loginAction();\n  };\n\n  componentWillMount() {\n    this.setState({\n      loading: true\n    });\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  validateCredentials() {\n    return fire\n      .auth()\n      .signInWithEmailAndPassword(\n        this.props.authState.email,\n        this.props.authState.password\n      );\n  }\n  successfullLogin() {\n    localStorage.setItem(\"authUser\", this.props.authState.email);\n    this.setState({\n      loading: false\n    });\n\n    // if (localStorage.getItem(\"authUser\")) {\n    //   this.props.setIsAuthorised(true);\n    // }\n\n    this.props.history.push(\"/\");\n  }\n\n  loginAction = async () => {\n    try {\n      await this.validateCredentials();\n      await this.successfullLogin();\n    } catch (e) {\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  };\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    this.setState({ orderForm: updatedOrderForm });\n  };\n\n  render() {\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n    const { error, loading } = this.state;\n\n    // let loginPage = (\n    //   <div\n    //     style={{\n    //       width: \"100%\",\n    //       height: \"100%\",\n    //       borderRadius: \"5px\",\n    //       justifyContent: \"center\"\n    //     }}\n    //   >\n    //     <form>\n    //       <div\n    //         style={{\n    //           width: \"40%\",\n    //           marginTop: \"50px\",\n    //           background: \"gray\",\n    //           borderRadius: \"5px\",\n    //           alignContent: \"center\",\n    //           justifyContent: \"center\",\n    //           marginLeft: \"30%\",\n    //           color: \"white\"\n    //         }}\n    //       >\n    //         <br />\n    //         <h3>\n    //           <strong>Login Page</strong>\n    //         </h3>\n    //         {error ? (\n    //           <div>\n    //             <p style={{ color: \"red\" }}>{error.message}</p>\n    //           </div>\n    //         ) : null}\n    //         <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n    //             Email :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"email\"\n    //             placeholder=\" Email\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n    //             password :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"password\"\n    //             placeholder=\" Password\"\n    //             // value={this.props.authState.password}\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n    //         <div className=\"form-group\">\n    //           <button\n    //             style={{\n    //               width: \"70px\",\n    //               borderRadius: \"5px\",\n    //               background: \"green\",\n    //               borderStyle: \"none\",\n    //               padding: \"5px\",\n    //               color: \"white\"\n    //             }}\n    //             onClick={this.onSubmitLogin}\n    //           >\n    //             Login\n    //           </button>\n    //           <br />\n    //           or <br />\n    //           Do\n    //           <Link to={\"/register\"}> Register </Link>\n    //           here.\n    //         </div>\n    //         <br />\n    //       </div>\n    //     </form>\n    //   </div>\n    // );\n\n    let loginPage = (\n      <form onSubmit={this.orderHandler}>\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        {/* <Button btnType=\"Success\">ORDER</Button> */}\n        <button\n          style={{\n            width: \"70px\",\n            borderRadius: \"5px\",\n            background: \"green\",\n            borderStyle: \"none\",\n            padding: \"5px\",\n            color: \"white\"\n          }}\n          onClick={this.onSubmitLogin}\n        >\n          Login\n        </button>\n      </form>\n    );\n\n    if (loading) {\n      loginPage = <Spinner />;\n    }\n\n    return <Fragment>{loginPage}</Fragment>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    authState: state.authState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInputChange: e =>\n      dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      })\n    //   ,\n    // setIsAuthorised: status => dispatch({ type: \"onSetAuthorise\", status })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Login);\n"]},"metadata":{},"sourceType":"module"}