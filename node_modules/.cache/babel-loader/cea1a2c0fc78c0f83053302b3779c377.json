{"ast":null,"code":"import _objectSpread from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ashitosh/mineapp/mine3/src/components/register.js\";\nimport React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../UI/Spinner\";\nimport moment from \"moment\";\nimport Input from \"../UI/Input/Input\";\nimport Validator from \"validatorjs\";\nvar initialState = {\n  success: \"\",\n  error: \"\",\n  loading: false,\n  orderForm: {\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Username\"\n      },\n      value: \"\",\n      rule: \"required|email\"\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      rule: \"required|password\"\n    },\n    fullname: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        name: \"fullname\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\",\n      rule: \"required\"\n    }\n  }\n};\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n\n    _this.onSubmitRegister = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      if ( // !this.props.registration.email ||\n      // !this.props.registration.fullname ||\n      // !this.props.registration.password\n      !_this.state.orderForm.email.value || !_this.state.orderForm.fullname.value || !_this.state.orderForm.password.value) {\n        return _this.setState({\n          error: {\n            message: \"Please enter required details\"\n          },\n          loading: false\n        });\n      }\n\n      _this.registerAction();\n    };\n\n    _this.registerAction =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.validateDataWithFireBase();\n\n            case 3:\n              _context.next = 5;\n              return _this.insertToDatabase();\n\n            case 5:\n              _this.reset();\n\n              _this.setState({\n                success: \"User registered successfully\"\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                error: _context.t0,\n                loading: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n\n      var input = {\n        name: \"\",\n        email: \"\"\n      };\n      var rules = {\n        name: \"required\",\n        email: \"required\"\n      };\n      var validation = new Validator(input, rules, {\n        \"required.email\": \"Without an :attribute we can't reach you!\"\n      });\n      console.log(validation.passes());\n      console.log(validation.errors.first(\"name\")); // returns  'The name field is required.'\n\n      console.log(validation.errors.first(\"email\"));\n    };\n\n    _this.state = _objectSpread({}, initialState);\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"reset\",\n    value: function reset() {\n      this.setState(initialState);\n    }\n  }, {\n    key: \"validateDataWithFireBase\",\n    value: function validateDataWithFireBase() {\n      return fire.auth().createUserWithEmailAndPassword( // this.props.registration.email,\n      // this.props.registration.password\n      this.state.orderForm.email.value, this.state.orderForm.password.value);\n    }\n  }, {\n    key: \"insertToDatabase\",\n    value: function insertToDatabase() {\n      // var key = \"users/\" + this.props.registration.fullname;\n      var key = \"users/\" + this.state.orderForm.fullname.value;\n      return fire.database().ref(key).set({\n        // email: this.props.registration.email,\n        // password: this.props.registration.password,\n        // fullname: this.props.registration.fullname,\n        email: this.state.orderForm.email.value,\n        password: this.state.orderForm.password.value,\n        fullname: this.state.orderForm.fullname.value,\n        created_on: moment().format(),\n        updated_on: moment().format()\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        loading: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          success = _this$state.success,\n          error = _this$state.error,\n          loading = _this$state.loading;\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      } // let registrationPage = (\n      //   <div\n      //     style={{\n      //       width: \"100%\",\n      //       height: \"100%\",\n      //       borderRadius: \"5px\",\n      //       justifyContent: \"center\"\n      //     }}\n      //   >\n      //     <form>\n      //       <div\n      //         style={{\n      //           width: \"40%\",\n      //           marginTop: \"50px\",\n      //           background: \"gray\",\n      //           borderRadius: \"5px\",\n      //           alignContent: \"center\",\n      //           justifyContent: \"center\",\n      //           marginLeft: \"30%\",\n      //           color: \"white\"\n      //         }}\n      //       >\n      //         <br />\n      //         <h3>\n      //           <strong>Register Page</strong>\n      //         </h3>\n      //         {error ? (\n      //           <div>\n      //             <p style={{ color: \"red\" }}>{error.message}</p>\n      //           </div>\n      //         ) : null}\n      //         {success ? (\n      //           <div>\n      //             <p style={{ color: \"green\" }}>{success}</p>\n      //           </div>\n      //         ) : null}\n      //         {/* <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n      //             Email :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"email\"\n      //             placeholder=\" Email\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"fullname\">\n      //             Full Name :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"fullname\"\n      //             placeholder=\" Full Name\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n      //             Password :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"password\"\n      //             placeholder=\" Password\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div> */}\n      //         <div className=\"form-group\">\n      //           <button\n      //             style={{\n      //               width: \"70px\",\n      //               borderRadius: \"5px\",\n      //               background: \"green\",\n      //               borderStyle: \"none\",\n      //               padding: \"5px\",\n      //               color: \"white\"\n      //             }}\n      //             onClick={this.onSubmitRegister}\n      //           >\n      //             Register\n      //           </button>\n      //           <br />\n      //           or <br />\n      //           <div>\n      //             <span>Already registered </span>\n      //             <Link\n      //               style={{ color: \"#f4a941\", fontWeight: \"bold\" }}\n      //               to={\"/login\"}\n      //             >\n      //               Login\n      //             </Link>\n      //             <span> from here</span>\n      //             <br />\n      //           </div>\n      //           <br />\n      //         </div>\n      //       </div>\n      //     </form>\n      //   </div>\n      // );\n\n\n      var registrationPage = React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, \"Register Page\")), error ? React.createElement(\"div\", {\n        class: \"alert alert-danger\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 284\n        },\n        __self: this\n      }, \"Alert!\"), \" \", error.message, \".\") : null, success ? React.createElement(\"div\", {\n        class: \"alert alert-success\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"Success!\"), \" \", success, \".\") : null, formElementsArray.map(function (formElement) {\n        return React.createElement(Fragment, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 295\n          },\n          __self: this\n        }, React.createElement(Input, {\n          key: formElement.id,\n          label: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 296\n          },\n          __self: this\n        }));\n      }), React.createElement(\"button\", {\n        className: \"btn btn-success\",\n        onClick: this.onSubmitRegister,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 313\n        },\n        __self: this\n      }, \"Login\"));\n\n      if (loading) {\n        registrationPage = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 320\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 323\n        },\n        __self: this\n      }, registrationPage);\n    }\n  }]);\n\n  return Register;\n}(Component); // const mapStateToProps = state => {\n//   return {\n//     registration: state.authState\n//   };\n// };\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onInputChange: e =>\n//       dispatch({\n//         type: \"onChange\",\n//         name: e.target.name,\n//         value: e.target.value\n//       })\n//   };\n// };\n\n\nexport default Register; // export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(Register);","map":{"version":3,"sources":["/home/ashitosh/mineapp/mine3/src/components/register.js"],"names":["React","Component","Fragment","fire","Link","connect","Spinner","moment","Input","Validator","initialState","success","error","loading","orderForm","email","elementType","elementConfig","type","name","placeholder","value","rule","password","fullname","Register","props","onSubmitRegister","e","preventDefault","setState","state","message","registerAction","validateDataWithFireBase","insertToDatabase","reset","inputChangedHandler","event","inputIdentifier","updatedOrderForm","updatedFormElement","target","input","rules","validation","console","log","passes","errors","first","auth","createUserWithEmailAndPassword","key","database","ref","set","created_on","format","updated_on","formElementsArray","push","id","config","registrationPage","map","formElement"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,IAAP,MAAiB,sBAAjB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,OAAO,EAAE,EADU;AAEnBC,EAAAA,KAAK,EAAE,EAFY;AAGnBC,EAAAA,OAAO,EAAE,KAHU;AAInBC,EAAAA,SAAS,EAAE;AACTC,IAAAA,KAAK,EAAE;AACLC,MAAAA,WAAW,EAAE,OADR;AAELC,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE,OADO;AAEbC,QAAAA,IAAI,EAAE,OAFO;AAGbC,QAAAA,WAAW,EAAE;AAHA,OAFV;AAOLC,MAAAA,KAAK,EAAE,EAPF;AAQLC,MAAAA,IAAI,EAAE;AARD,KADE;AAWTC,IAAAA,QAAQ,EAAE;AACRP,MAAAA,WAAW,EAAE,OADL;AAERC,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE,UADO;AAEbC,QAAAA,IAAI,EAAE,UAFO;AAGbC,QAAAA,WAAW,EAAE;AAHA,OAFP;AAORC,MAAAA,KAAK,EAAE,EAPC;AAQRC,MAAAA,IAAI,EAAE;AARE,KAXD;AAqBTE,IAAAA,QAAQ,EAAE;AACRR,MAAAA,WAAW,EAAE,OADL;AAERC,MAAAA,aAAa,EAAE;AACbC,QAAAA,IAAI,EAAE,MADO;AAEbC,QAAAA,IAAI,EAAE,UAFO;AAGbC,QAAAA,WAAW,EAAE;AAHA,OAFP;AAORC,MAAAA,KAAK,EAAE,EAPC;AAQRC,MAAAA,IAAI,EAAE;AARE;AArBD;AAJQ,CAArB;;IAsCMG,Q;;;;;AACJ,oBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,kFAAMA,KAAN;;AADiB,UASnBC,gBATmB,GASA,UAAAC,CAAC,EAAI;AACtBA,MAAAA,CAAC,CAACC,cAAF;;AACA,YAAKC,QAAL,CAAc;AACZjB,QAAAA,OAAO,EAAE;AADG,OAAd;;AAIA,WACE;AACA;AACA;AACA,OAAC,MAAKkB,KAAL,CAAWjB,SAAX,CAAqBC,KAArB,CAA2BM,KAA5B,IACA,CAAC,MAAKU,KAAL,CAAWjB,SAAX,CAAqBU,QAArB,CAA8BH,KAD/B,IAEA,CAAC,MAAKU,KAAL,CAAWjB,SAAX,CAAqBS,QAArB,CAA8BF,KANjC,EAOE;AACA,eAAO,MAAKS,QAAL,CAAc;AACnBlB,UAAAA,KAAK,EAAE;AAAEoB,YAAAA,OAAO,EAAE;AAAX,WADY;AAEnBnB,UAAAA,OAAO,EAAE;AAFU,SAAd,CAAP;AAID;;AAED,YAAKoB,cAAL;AACD,KA9BkB;;AAAA,UA2DnBA,cA3DmB;AAAA;AAAA;AAAA;AAAA,6BA2DF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAEP,MAAKC,wBAAL,EAFO;;AAAA;AAAA;AAAA,qBAGP,MAAKC,gBAAL,EAHO;;AAAA;AAIb,oBAAKC,KAAL;;AACA,oBAAKN,QAAL,CAAc;AAAEnB,gBAAAA,OAAO,EAAE;AAAX,eAAd;;AALa;AAAA;;AAAA;AAAA;AAAA;;AAOb,oBAAKmB,QAAL,CAAc;AACZlB,gBAAAA,KAAK,aADO;AAEZC,gBAAAA,OAAO,EAAE;AAFG,eAAd;;AAPa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KA3DE;;AAAA,UAoFnBwB,mBApFmB,GAoFG,UAACC,KAAD,EAAQC,eAAR,EAA4B;AAChD,UAAMC,gBAAgB,qBACjB,MAAKT,KAAL,CAAWjB,SADM,CAAtB;;AAGA,UAAM2B,kBAAkB,qBACnBD,gBAAgB,CAACD,eAAD,CADG,CAAxB;;AAGAE,MAAAA,kBAAkB,CAACpB,KAAnB,GAA2BiB,KAAK,CAACI,MAAN,CAAarB,KAAxC;AACAmB,MAAAA,gBAAgB,CAACD,eAAD,CAAhB,GAAoCE,kBAApC;;AACA,YAAKX,QAAL,CAAc;AAAEhB,QAAAA,SAAS,EAAE0B;AAAb,OAAd;;AAEA,UAAIG,KAAK,GAAG;AAAExB,QAAAA,IAAI,EAAE,EAAR;AAAYJ,QAAAA,KAAK,EAAE;AAAnB,OAAZ;AACA,UAAI6B,KAAK,GAAG;AAAEzB,QAAAA,IAAI,EAAE,UAAR;AAAoBJ,QAAAA,KAAK,EAAE;AAA3B,OAAZ;AAEA,UAAI8B,UAAU,GAAG,IAAIpC,SAAJ,CAAckC,KAAd,EAAqBC,KAArB,EAA4B;AAC3C,0BAAkB;AADyB,OAA5B,CAAjB;AAGAE,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACG,MAAX,EAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACI,MAAX,CAAkBC,KAAlB,CAAwB,MAAxB,CAAZ,EAlBgD,CAkBF;;AAC9CJ,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAU,CAACI,MAAX,CAAkBC,KAAlB,CAAwB,OAAxB,CAAZ;AACD,KAxGkB;;AAEjB,UAAKnB,KAAL,qBAAkBrB,YAAlB;AAFiB;AAGlB;;;;4BAEO;AACN,WAAKoB,QAAL,CAAcpB,YAAd;AACD;;;+CAyB0B;AACzB,aAAOP,IAAI,CAACgD,IAAL,GAAYC,8BAAZ,EACL;AACA;AACA,WAAKrB,KAAL,CAAWjB,SAAX,CAAqBC,KAArB,CAA2BM,KAHtB,EAIL,KAAKU,KAAL,CAAWjB,SAAX,CAAqBS,QAArB,CAA8BF,KAJzB,CAAP;AAMD;;;uCAEkB;AACjB;AACA,UAAIgC,GAAG,GAAG,WAAW,KAAKtB,KAAL,CAAWjB,SAAX,CAAqBU,QAArB,CAA8BH,KAAnD;AACA,aAAOlB,IAAI,CACRmD,QADI,GAEJC,GAFI,CAEAF,GAFA,EAGJG,GAHI,CAGA;AACH;AACA;AACA;AACAzC,QAAAA,KAAK,EAAE,KAAKgB,KAAL,CAAWjB,SAAX,CAAqBC,KAArB,CAA2BM,KAJ/B;AAKHE,QAAAA,QAAQ,EAAE,KAAKQ,KAAL,CAAWjB,SAAX,CAAqBS,QAArB,CAA8BF,KALrC;AAMHG,QAAAA,QAAQ,EAAE,KAAKO,KAAL,CAAWjB,SAAX,CAAqBU,QAArB,CAA8BH,KANrC;AAOHoC,QAAAA,UAAU,EAAElD,MAAM,GAAGmD,MAAT,EAPT;AAQHC,QAAAA,UAAU,EAAEpD,MAAM,GAAGmD,MAAT;AART,OAHA,CAAP;AAaD;;;yCAgBoB;AACnB,WAAK5B,QAAL,CAAc;AACZjB,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD;;;wCACmB;AAClB,WAAKiB,QAAL,CAAc;AACZjB,QAAAA,OAAO,EAAE;AADG,OAAd;AAGD;;;6BAwBQ;AAAA;;AAAA,wBAC6B,KAAKkB,KADlC;AAAA,UACCpB,OADD,eACCA,OADD;AAAA,UACUC,KADV,eACUA,KADV;AAAA,UACiBC,OADjB,eACiBA,OADjB;AAGP,UAAM+C,iBAAiB,GAAG,EAA1B;;AACA,WAAK,IAAIP,GAAT,IAAgB,KAAKtB,KAAL,CAAWjB,SAA3B,EAAsC;AACpC8C,QAAAA,iBAAiB,CAACC,IAAlB,CAAuB;AACrBC,UAAAA,EAAE,EAAET,GADiB;AAErBU,UAAAA,MAAM,EAAE,KAAKhC,KAAL,CAAWjB,SAAX,CAAqBuC,GAArB;AAFa,SAAvgBAAgB,GAClB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,CADF,EAIGpD,KAAK,GACJ;AAAK,QAAA,KAAK,EAAC,oBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,OAC2BA,KAAK,CAACoB,OADjC,MADI,GAIF,IARN,EAUGrB,OAAO,GACN;AAAK,QAAA,KAAK,EAAC,qBAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,OAC6BA,OAD7B,MADM,GAIJ,IAdN,EAgBGiD,iBAAiB,CAACK,GAAlB,CAAsB,UAAAC,WAAW;AAAA,eAChC,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,oBAAC,KAAD;AACE,UAAA,GAAG,EAAEA,WAAW,CAACJ,EADnB;AAEE,UAAA,KAAK,EAAEI,WAAW,CAACJ,EAFrB;AAGE,UAAA,WAAW,EAAEI,WAAW,CAACH,MAAZ,CAAmB/C,WAHlC;AAIE,UAAA,aAAa,EAAEkD,WAAW,CAACH,MAAZ,CAAmB9C,aAJpC;AAKE,UAAA,KAAK,EAAEiD,WAAW,CAACH,MAAZ,CAAmB1C,KAL5B;AAME,UAAA,OAAO,EAAE,iBAAAiB,KAAK;AAAA,mBAAI,MAAI,CAACD,mBAAL,CAAyBC,KAAzB,EAAgC4B,WAAW,CAACJ,EAA5C,CAAJ;AAAA,WANhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CADgC;AAAA,OAAjC,CAhBH,EAmCE;AAAQ,QAAA,SAAS,EAAC,iBAAlB;AAAoC,QAAA,OAAO,EAAE,KAAKnC,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAnCF,CADF;;AA0CA,UAAId,OAAJ,EAAa;AACXmD,QAAAA,gBAAgB,GAAG,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAnB;AACD;;AAED,aAAO,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAWA,gBAAX,CAAP;AACD;;;;EApRoB/D,S,GAuRvB;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAewB,QAAf,C,CAEA;AACA;AACA;AACA","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../UI/Spinner\";\nimport moment from \"moment\";\nimport Input from \"../UI/Input/Input\";\nimport Validator from \"validatorjs\";\n\nconst initialState = {\n  success: \"\",\n  error: \"\",\n  loading: false,\n  orderForm: {\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Username\"\n      },\n      value: \"\",\n      rule: \"required|email\"\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\",\n      rule: \"required|password\"\n    },\n    fullname: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        name: \"fullname\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\",\n      rule: \"required\"\n    }\n  }\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initialState };\n  }\n\n  reset() {\n    this.setState(initialState);\n  }\n\n  onSubmitRegister = e => {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    });\n\n    if (\n      // !this.props.registration.email ||\n      // !this.props.registration.fullname ||\n      // !this.props.registration.password\n      !this.state.orderForm.email.value ||\n      !this.state.orderForm.fullname.value ||\n      !this.state.orderForm.password.value\n    ) {\n      return this.setState({\n        error: { message: \"Please enter required details\" },\n        loading: false\n      });\n    }\n\n    this.registerAction();\n  };\n\n  validateDataWithFireBase() {\n    return fire.auth().createUserWithEmailAndPassword(\n      // this.props.registration.email,\n      // this.props.registration.password\n      this.state.orderForm.email.value,\n      this.state.orderForm.password.value\n    );\n  }\n\n  insertToDatabase() {\n    // var key = \"users/\" + this.props.registration.fullname;\n    var key = \"users/\" + this.state.orderForm.fullname.value;\n    return fire\n      .database()\n      .ref(key)\n      .set({\n        // email: this.props.registration.email,\n        // password: this.props.registration.password,\n        // fullname: this.props.registration.fullname,\n        email: this.state.orderForm.email.value,\n        password: this.state.orderForm.password.value,\n        fullname: this.state.orderForm.fullname.value,\n        created_on: moment().format(),\n        updated_on: moment().format()\n      });\n  }\n\n  registerAction = async () => {\n    try {\n      await this.validateDataWithFireBase();\n      await this.insertToDatabase();\n      this.reset();\n      this.setState({ success: \"User registered successfully\" });\n    } catch (e) {\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.setState({\n      loading: true\n    });\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    this.setState({ orderForm: updatedOrderForm });\n\n    let input = { name: \"\", email: \"\" };\n    let rules = { name: \"required\", email: \"required\" };\n\n    let validation = new Validator(input, rules, {\n      \"required.email\": \"Without an :attribute we can't reach you!\"\n    });\n    console.log(validation.passes());\n    console.log(validation.errors.first(\"name\")); // returns  'The name field is required.'\n    console.log(validation.errors.first(\"email\"));\n  };\n\n  render() {\n    const { success, error, loading } = this.state;\n\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    // let registrationPage = (\n    //   <div\n    //     style={{\n    //       width: \"100%\",\n    //       height: \"100%\",\n    //       borderRadius: \"5px\",\n    //       justifyContent: \"center\"\n    //     }}\n    //   >\n    //     <form>\n    //       <div\n    //         style={{\n    //           width: \"40%\",\n    //           marginTop: \"50px\",\n    //           background: \"gray\",\n    //           borderRadius: \"5px\",\n    //           alignContent: \"center\",\n    //           justifyContent: \"center\",\n    //           marginLeft: \"30%\",\n    //           color: \"white\"\n    //         }}\n    //       >\n    //         <br />\n    //         <h3>\n    //           <strong>Register Page</strong>\n    //         </h3>\n    //         {error ? (\n    //           <div>\n    //             <p style={{ color: \"red\" }}>{error.message}</p>\n    //           </div>\n    //         ) : null}\n\n    //         {success ? (\n    //           <div>\n    //             <p style={{ color: \"green\" }}>{success}</p>\n    //           </div>\n    //         ) : null}\n\n    //         {/* <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n    //             Email :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"email\"\n    //             placeholder=\" Email\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"fullname\">\n    //             Full Name :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"fullname\"\n    //             placeholder=\" Full Name\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n    //             Password :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"password\"\n    //             placeholder=\" Password\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div> */}\n\n    //         <div className=\"form-group\">\n    //           <button\n    //             style={{\n    //               width: \"70px\",\n    //               borderRadius: \"5px\",\n    //               background: \"green\",\n    //               borderStyle: \"none\",\n    //               padding: \"5px\",\n    //               color: \"white\"\n    //             }}\n    //             onClick={this.onSubmitRegister}\n    //           >\n    //             Register\n    //           </button>\n    //           <br />\n    //           or <br />\n    //           <div>\n    //             <span>Already registered </span>\n    //             <Link\n    //               style={{ color: \"#f4a941\", fontWeight: \"bold\" }}\n    //               to={\"/login\"}\n    //             >\n    //               Login\n    //             </Link>\n    //             <span> from here</span>\n    //             <br />\n    //           </div>\n    //           <br />\n    //         </div>\n    //       </div>\n    //     </form>\n    //   </div>\n    // );\n\n    let registrationPage = (\n      <form>\n        <h3>\n          <strong>Register Page</strong>\n        </h3>\n        {error ? (\n          <div class=\"alert alert-danger\">\n            <strong>Alert!</strong> {error.message}.\n          </div>\n        ) : null}\n\n        {success ? (\n          <div class=\"alert alert-success\">\n            <strong>Success!</strong> {success}.\n          </div>\n        ) : null}\n\n        {formElementsArray.map(formElement => (\n          <Fragment>\n            <Input\n              key={formElement.id}\n              label={formElement.id}\n              elementType={formElement.config.elementType}\n              elementConfig={formElement.config.elementConfig}\n              value={formElement.config.value}\n              changed={event => this.inputChangedHandler(event, formElement.id)}\n            />\n            {/* {this.validator.message(\n              formElement.id,\n              formElement.config.value,\n              formElement.config.rule,\n              \"text-danger\"\n            )} */}\n          </Fragment>\n        ))}\n\n        <button className=\"btn btn-success\" onClick={this.onSubmitRegister}>\n          Login\n        </button>\n      </form>\n    );\n\n    if (loading) {\n      registrationPage = <Spinner />;\n    }\n\n    return <Fragment>{registrationPage}</Fragment>;\n  }\n}\n\n// const mapStateToProps = state => {\n//   return {\n//     registration: state.authState\n//   };\n// };\n\n// const mapDispatchToProps = dispatch => {\n//   return {\n//     onInputChange: e =>\n//       dispatch({\n//         type: \"onChange\",\n//         name: e.target.name,\n//         value: e.target.value\n//       })\n//   };\n// };\n\nexport default Register;\n\n// export default connect(\n//   mapStateToProps,\n//   mapDispatchToProps\n// )(Register);\n"]},"metadata":{},"sourceType":"module"}