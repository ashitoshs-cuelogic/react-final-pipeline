{"ast":null,"code":"import _defineProperty from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/home/ashitosh/mineapp/mine3/src/charts/ChartComponent.js\";\nimport React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { COLORS, renderCustomizedLabel } from \"./chartConstant\";\n\nvar charts = function charts(props) {\n  var _React$createElement;\n\n  // let inputElement = null;\n  // switch (props.elementType) {\n  //   case \"input\":\n  //     inputElement = (\n  //       <input\n  //         className=\"form-control \"\n  //         {...props.elementConfig}\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       />\n  //     );\n  //     break;\n  //   case \"froalaEditor\":\n  //     inputElement = (\n  //       <FroalaEditor\n  //         className=\"form-control \"\n  //         {...props.elementConfig}\n  //         tag=\"textarea\"\n  //         placeholder=\"Content\"\n  //         model={props.value}\n  //         // model={content}\n  //         onModelChange={props.changed}\n  //       />\n  //     );\n  //     break;\n  //   case \"select\":\n  //     inputElement = (\n  //       <select\n  //         className=\"form-control \"\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       >\n  //         {props.elementConfig.options.map(option => (\n  //           <option value={option.value}>{option.displayValue} </option>\n  //         ))}\n  //       </select>\n  //     );\n  //     break;\n  //   default:\n  //     inputElement = (\n  //       <input\n  //         className=\"form-control\"\n  //         {...props.elementConfig}\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       />\n  //     );\n  // }\n  return React.createElement(PieChart, {\n    width: 800,\n    height: 400,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Pie, (_React$createElement = {\n    data: props.pages,\n    cx: 300,\n    cy: 200,\n    labelLine: false,\n    label: renderCustomizedLabel,\n    outerRadius: 100,\n    fill: \"#8884d8\",\n    dataKey: \"value\"\n  }, _defineProperty(_React$createElement, \"cx\", 300), _defineProperty(_React$createElement, \"cy\", 200), _defineProperty(_React$createElement, \"innerRadius\", 60), _defineProperty(_React$createElement, \"outerRadius\", 100), _defineProperty(_React$createElement, \"labelLine\", false), _defineProperty(_React$createElement, \"label\", renderCustomizedLabel), _defineProperty(_React$createElement, \"fill\", \"#8884d8\"), _defineProperty(_React$createElement, \"paddingAngle\", 5), _defineProperty(_React$createElement, \"dataKey\", \"value\"), _defineProperty(_React$createElement, \"__source\", {\n    fileName: _jsxFileName,\n    lineNumber: 61\n  }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement), props.pages ? props.pages.map(function (entry, index) {\n    return React.createElement(Cell, {\n      key: \"cell-\".concat(index) // label={entry.name}\n      ,\n      fill: COLORS[index % COLORS.length],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    });\n  }) : null));\n}; // const charts = props => (\n//   <PieChart width={800} height={400}>\n//     <Pie\n//       data={this.props.data}\n//       cx={300}\n//       cy={200}\n//       labelLine={false}\n//       label={renderCustomizedLabel}\n//       outerRadius={100}\n//       fill=\"#8884d8\"\n//       dataKey=\"value\"\n//     >\n//       {this.props.data\n//         ? this.props.data.map((entry, index) => (\n//             <Cell\n//               key={`cell-${index}`}\n//               // label={entry.name}\n//               fill={COLORS[index % COLORS.length]}\n//             />\n//           ))\n//         : null}\n//     </Pie>\n//   </PieChart>\n// );\n\n\nexport default charts;","map":{"version":3,"sources":["/home/ashitosh/mineapp/mine3/src/charts/ChartComponent.js"],"names":["React","PieChart","Pie","Cell","COLORS","renderCustomizedLabel","charts","props","pages","map","entry","index","length"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,GAAnB,EAAwBC,IAAxB,QAAoC,UAApC;AACA,SAASC,MAAT,EAAiBC,qBAAjB,QAA8C,iBAA9C;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK,EAAI;AAAA;;AACtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SACE,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,GAAjB;AAAsB,IAAA,MAAM,EAAE,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAEA,KAAK,CAACC,KADd;AAEE,IAAA,EAAE,EAAE,GAFN;AAGE,IAAA,EAAE,EAAE,GAHN;AAIE,IAAA,SAAS,EAAE,KAJb;AAKE,IAAA,KAAK,EAAEH,qBALT;AAME,IAAA,WAAW,EAAE,GANf;AAOE,IAAA,IAAI,EAAC,SAPP;AAQE,IAAA,OAAO,EAAC;AARV,iDASM,GATN,+CAUM,GAVN,wDAWe,EAXf,wDAYe,GAZf,sDAaa,KAbb,kDAcSA,qBAdT,iDAeO,SAfP,yDAgBgB,CAhBhB,oDAiBU,OAjBV;AAAA;AAAA;AAAA,oFAmBGE,KAAK,CAACC,KAAN,GACGD,KAAK,CAACC,KAAN,CAAYC,GAAZ,CAAgB,UAACC,KAAD,EAAQC,KAAR;AAAA,WACd,oBAAC,IAAD;AACE,MAAA,GAAG,iBAAUA,KAAV,CADL,CAEE;AAFF;AAGE,MAAA,IAAI,EAAEP,MAAM,CAACO,KAAK,GAAGP,MAAM,CAACQ,MAAhB,CAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADc;AAAA,GAAhB,CADH,GAQG,IA3BN,CADF,CADF;AAiCD,CAvFD,C,CAyFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeN,MAAf","sourcesContent":["import React from \"react\";\nimport { PieChart, Pie, Cell } from \"recharts\";\nimport { COLORS, renderCustomizedLabel } from \"./chartConstant\";\n\nconst charts = props => {\n  // let inputElement = null;\n\n  // switch (props.elementType) {\n  //   case \"input\":\n  //     inputElement = (\n  //       <input\n  //         className=\"form-control \"\n  //         {...props.elementConfig}\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       />\n  //     );\n  //     break;\n\n  //   case \"froalaEditor\":\n  //     inputElement = (\n  //       <FroalaEditor\n  //         className=\"form-control \"\n  //         {...props.elementConfig}\n  //         tag=\"textarea\"\n  //         placeholder=\"Content\"\n  //         model={props.value}\n  //         // model={content}\n  //         onModelChange={props.changed}\n  //       />\n  //     );\n  //     break;\n\n  //   case \"select\":\n  //     inputElement = (\n  //       <select\n  //         className=\"form-control \"\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       >\n  //         {props.elementConfig.options.map(option => (\n  //           <option value={option.value}>{option.displayValue} </option>\n  //         ))}\n  //       </select>\n  //     );\n  //     break;\n\n  //   default:\n  //     inputElement = (\n  //       <input\n  //         className=\"form-control\"\n  //         {...props.elementConfig}\n  //         value={props.value}\n  //         onChange={props.changed}\n  //       />\n  //     );\n  // }\n\n  return (\n    <PieChart width={800} height={400}>\n      <Pie\n        data={props.pages}\n        cx={300}\n        cy={200}\n        labelLine={false}\n        label={renderCustomizedLabel}\n        outerRadius={100}\n        fill=\"#8884d8\"\n        dataKey=\"value\"\n        cx={300}\n        cy={200}\n        innerRadius={60}\n        outerRadius={100}\n        labelLine={false}\n        label={renderCustomizedLabel}\n        fill=\"#8884d8\"\n        paddingAngle={5}\n        dataKey=\"value\"\n      >\n        {props.pages\n          ? props.pages.map((entry, index) => (\n              <Cell\n                key={`cell-${index}`}\n                // label={entry.name}\n                fill={COLORS[index % COLORS.length]}\n              />\n            ))\n          : null}\n      </Pie>\n    </PieChart>\n  );\n};\n\n// const charts = props => (\n//   <PieChart width={800} height={400}>\n//     <Pie\n//       data={this.props.data}\n//       cx={300}\n//       cy={200}\n//       labelLine={false}\n//       label={renderCustomizedLabel}\n//       outerRadius={100}\n//       fill=\"#8884d8\"\n//       dataKey=\"value\"\n//     >\n//       {this.props.data\n//         ? this.props.data.map((entry, index) => (\n//             <Cell\n//               key={`cell-${index}`}\n//               // label={entry.name}\n//               fill={COLORS[index % COLORS.length]}\n//             />\n//           ))\n//         : null}\n//     </Pie>\n//   </PieChart>\n// );\n\nexport default charts;\n"]},"metadata":{},"sourceType":"module"}