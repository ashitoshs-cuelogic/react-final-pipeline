{"ast":null,"code":"import _objectSpread from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/ashitosh/mineapp/mine3/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/ashitosh/mineapp/mine3/src/components/register.js\";\nimport React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../UI/Spinner\";\nimport moment from \"moment\";\nimport Input from \"../UI/Input/Input\";\nvar initialState = {\n  success: \"\",\n  error: \"\",\n  loading: false,\n  orderForm: {\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Username\"\n      },\n      value: \"\"\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\"\n    },\n    fullname: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        name: \"fullname\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\"\n    }\n  }\n};\n\nvar Register =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Register, _Component);\n\n  function Register(props) {\n    var _this;\n\n    _classCallCheck(this, Register);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Register).call(this, props));\n\n    _this.onSubmitRegister = function (e) {\n      e.preventDefault();\n\n      _this.setState({\n        loading: true\n      });\n\n      if (!_this.props.registration.email || !_this.props.registration.fullname || !_this.props.registration.password) {\n        return _this.setState({\n          error: {\n            message: \"Please enter required details\"\n          },\n          loading: false\n        });\n      }\n\n      _this.registerAction();\n    };\n\n    _this.registerAction =\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _this.validateDataWithFireBase();\n\n            case 3:\n              _context.next = 5;\n              return _this.insertToDatabase();\n\n            case 5:\n              _this.reset();\n\n              _this.setState({\n                success: \"User registered successfully\"\n              });\n\n              _context.next = 12;\n              break;\n\n            case 9:\n              _context.prev = 9;\n              _context.t0 = _context[\"catch\"](0);\n\n              _this.setState({\n                error: _context.t0,\n                loading: false\n              });\n\n            case 12:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[0, 9]]);\n    }));\n\n    _this.inputChangedHandler = function (event, inputIdentifier) {\n      var updatedOrderForm = _objectSpread({}, _this.state.orderForm);\n\n      var updatedFormElement = _objectSpread({}, updatedOrderForm[inputIdentifier]);\n\n      updatedFormElement.value = event.target.value;\n      updatedOrderForm[inputIdentifier] = updatedFormElement;\n\n      _this.setState({\n        orderForm: updatedOrderForm\n      });\n    };\n\n    _this.state = _objectSpread({}, initialState);\n    return _this;\n  }\n\n  _createClass(Register, [{\n    key: \"reset\",\n    value: function reset() {\n      this.setState(initialState);\n    }\n  }, {\n    key: \"validateDataWithFireBase\",\n    value: function validateDataWithFireBase() {\n      return fire.auth().createUserWithEmailAndPassword(this.props.registration.email, this.props.registration.password);\n    }\n  }, {\n    key: \"insertToDatabase\",\n    value: function insertToDatabase() {\n      var key = \"users/\" + this.props.registration.fullname;\n      return fire.database().ref(key).set({\n        email: this.props.registration.email,\n        password: this.props.registration.password,\n        fullname: this.props.registration.fullname,\n        created_on: moment().format(),\n        updated_on: moment().format()\n      });\n    }\n  }, {\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.setState({\n        loading: true\n      });\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        loading: false\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$state = this.state,\n          success = _this$state.success,\n          error = _this$state.error,\n          loading = _this$state.loading;\n      var formElementsArray = [];\n\n      for (var key in this.state.orderForm) {\n        formElementsArray.push({\n          id: key,\n          config: this.state.orderForm[key]\n        });\n      } // let registrationPage = (\n      //   <div\n      //     style={{\n      //       width: \"100%\",\n      //       height: \"100%\",\n      //       borderRadius: \"5px\",\n      //       justifyContent: \"center\"\n      //     }}\n      //   >\n      //     <form>\n      //       <div\n      //         style={{\n      //           width: \"40%\",\n      //           marginTop: \"50px\",\n      //           background: \"gray\",\n      //           borderRadius: \"5px\",\n      //           alignContent: \"center\",\n      //           justifyContent: \"center\",\n      //           marginLeft: \"30%\",\n      //           color: \"white\"\n      //         }}\n      //       >\n      //         <br />\n      //         <h3>\n      //           <strong>Register Page</strong>\n      //         </h3>\n      //         {error ? (\n      //           <div>\n      //             <p style={{ color: \"red\" }}>{error.message}</p>\n      //           </div>\n      //         ) : null}\n      //         {success ? (\n      //           <div>\n      //             <p style={{ color: \"green\" }}>{success}</p>\n      //           </div>\n      //         ) : null}\n      //         {/* <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n      //             Email :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"email\"\n      //             placeholder=\" Email\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"fullname\">\n      //             Full Name :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"fullname\"\n      //             placeholder=\" Full Name\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div>\n      //         <div className=\"form-group\">\n      //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n      //             Password :\n      //           </label>\n      //           <input\n      //             style={{ borderRadius: \"5px\" }}\n      //             type=\"text\"\n      //             name=\"password\"\n      //             placeholder=\" Password\"\n      //             onChange={this.props.onInputChange}\n      //           />\n      //         </div> */}\n      //         <div className=\"form-group\">\n      //           <button\n      //             style={{\n      //               width: \"70px\",\n      //               borderRadius: \"5px\",\n      //               background: \"green\",\n      //               borderStyle: \"none\",\n      //               padding: \"5px\",\n      //               color: \"white\"\n      //             }}\n      //             onClick={this.onSubmitRegister}\n      //           >\n      //             Register\n      //           </button>\n      //           <br />\n      //           or <br />\n      //           <div>\n      //             <span>Already registered </span>\n      //             <Link\n      //               style={{ color: \"#f4a941\", fontWeight: \"bold\" }}\n      //               to={\"/login\"}\n      //             >\n      //               Login\n      //             </Link>\n      //             <span> from here</span>\n      //             <br />\n      //           </div>\n      //           <br />\n      //         </div>\n      //       </div>\n      //     </form>\n      //   </div>\n      // );\n\n\n      var registrationPage = React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 257\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 258\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259\n        },\n        __self: this\n      }, \"Register Page\")), error ? React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        style: {\n          color: \"red\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, error.message)) : null, formElementsArray.map(function (formElement) {\n        return React.createElement(Input, {\n          key: formElement.id,\n          label: formElement.id,\n          elementType: formElement.config.elementType,\n          elementConfig: formElement.config.elementConfig,\n          value: formElement.config.value,\n          changed: function changed(event) {\n            return _this2.inputChangedHandler(event, formElement.id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 267\n          },\n          __self: this\n        });\n      }), React.createElement(\"button\", {\n        style: {\n          width: \"70px\",\n          borderRadius: \"5px\",\n          background: \"green\",\n          borderStyle: \"none\",\n          padding: \"5px\",\n          color: \"white\"\n        },\n        onClick: this.onSubmitLogin,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }, \"Login\"));\n\n      if (loading) {\n        registrationPage = React.createElement(Spinner, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 294\n          },\n          __self: this\n        });\n      }\n\n      return React.createElement(Fragment, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 297\n        },\n        __self: this\n      }, registrationPage);\n    }\n  }]);\n\n  return Register;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    registration: state.authState\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    onInputChange: function onInputChange(e) {\n      return dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      });\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","map":{"version":3,"sources":["/home/ashitosh/mineapp/mine3/src/components/register.js"],"names":["React","Component","Fragment","fire","Link","connect","Spinner","moment","Input","initialState","success","error","loading","orderForm","email","elementType","elementConfig","type","name","placeholder","value","password","fullname","Register","props","onSubmitRegister","e","preventDefault","setState","registration","message","registerAction","validateDataWithFireBase","insertToDatabase","reset","inputChangedHandler","event","inputIdentifier","updatedOrderForm","state","updatedFormElement","target","auth","createUserWithEmailAndPassword","key","database","ref","set","created_on","format","updated_on","formElementsArray","push","id","config","registrationPage","color","map","formElement","width","borderRadius","background","borderStyle","padding","onSubmitLogin","mapStateToProps","authState","mapDispatchToProps","dispatch","onInputChange"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport fire from \"./../config/firebase\";\nimport { Link } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../UI/Spinner\";\nimport moment from \"moment\";\nimport Input from \"../UI/Input/Input\";\n\nconst initialState = {\n  success: \"\",\n  error: \"\",\n  loading: false,\n  orderForm: {\n    email: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"email\",\n        name: \"email\",\n        placeholder: \"Username\"\n      },\n      value: \"\"\n    },\n    password: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"password\",\n        name: \"password\",\n        placeholder: \"Password\"\n      },\n      value: \"\"\n    },\n    fullname: {\n      elementType: \"input\",\n      elementConfig: {\n        type: \"text\",\n        name: \"fullname\",\n        placeholder: \"Full Name\"\n      },\n      value: \"\"\n    }\n  }\n};\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...initialState };\n  }\n\n  reset() {\n    this.setState(initialState);\n  }\n\n  onSubmitRegister = e => {\n    e.preventDefault();\n    this.setState({\n      loading: true\n    });\n\n    if (\n      !this.props.registration.email ||\n      !this.props.registration.fullname ||\n      !this.props.registration.password\n    ) {\n      return this.setState({\n        error: { message: \"Please enter required details\" },\n        loading: false\n      });\n    }\n\n    this.registerAction();\n  };\n\n  validateDataWithFireBase() {\n    return fire\n      .auth()\n      .createUserWithEmailAndPassword(\n        this.props.registration.email,\n        this.props.registration.password\n      );\n  }\n\n  insertToDatabase() {\n    var key = \"users/\" + this.props.registration.fullname;\n    return fire\n      .database()\n      .ref(key)\n      .set({\n        email: this.props.registration.email,\n        password: this.props.registration.password,\n        fullname: this.props.registration.fullname,\n        created_on: moment().format(),\n        updated_on: moment().format()\n      });\n  }\n\n  registerAction = async () => {\n    try {\n      await this.validateDataWithFireBase();\n      await this.insertToDatabase();\n      this.reset();\n      this.setState({ success: \"User registered successfully\" });\n    } catch (e) {\n      this.setState({\n        error: e,\n        loading: false\n      });\n    }\n  };\n\n  componentWillMount() {\n    this.setState({\n      loading: true\n    });\n  }\n  componentDidMount() {\n    this.setState({\n      loading: false\n    });\n  }\n\n  inputChangedHandler = (event, inputIdentifier) => {\n    const updatedOrderForm = {\n      ...this.state.orderForm\n    };\n    const updatedFormElement = {\n      ...updatedOrderForm[inputIdentifier]\n    };\n    updatedFormElement.value = event.target.value;\n    updatedOrderForm[inputIdentifier] = updatedFormElement;\n    this.setState({ orderForm: updatedOrderForm });\n  };\n\n  render() {\n    const { success, error, loading } = this.state;\n\n    const formElementsArray = [];\n    for (let key in this.state.orderForm) {\n      formElementsArray.push({\n        id: key,\n        config: this.state.orderForm[key]\n      });\n    }\n\n    // let registrationPage = (\n    //   <div\n    //     style={{\n    //       width: \"100%\",\n    //       height: \"100%\",\n    //       borderRadius: \"5px\",\n    //       justifyContent: \"center\"\n    //     }}\n    //   >\n    //     <form>\n    //       <div\n    //         style={{\n    //           width: \"40%\",\n    //           marginTop: \"50px\",\n    //           background: \"gray\",\n    //           borderRadius: \"5px\",\n    //           alignContent: \"center\",\n    //           justifyContent: \"center\",\n    //           marginLeft: \"30%\",\n    //           color: \"white\"\n    //         }}\n    //       >\n    //         <br />\n    //         <h3>\n    //           <strong>Register Page</strong>\n    //         </h3>\n    //         {error ? (\n    //           <div>\n    //             <p style={{ color: \"red\" }}>{error.message}</p>\n    //           </div>\n    //         ) : null}\n\n    //         {success ? (\n    //           <div>\n    //             <p style={{ color: \"green\" }}>{success}</p>\n    //           </div>\n    //         ) : null}\n\n    //         {/* <div style={{ marginTop: \"20px\" }} className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"email\">\n    //             Email :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"email\"\n    //             placeholder=\" Email\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"fullname\">\n    //             Full Name :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"fullname\"\n    //             placeholder=\" Full Name\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div>\n\n    //         <div className=\"form-group\">\n    //           <label style={{ width: \"20%\" }} htmlFor=\"password\">\n    //             Password :\n    //           </label>\n    //           <input\n    //             style={{ borderRadius: \"5px\" }}\n    //             type=\"text\"\n    //             name=\"password\"\n    //             placeholder=\" Password\"\n    //             onChange={this.props.onInputChange}\n    //           />\n    //         </div> */}\n\n    //         <div className=\"form-group\">\n    //           <button\n    //             style={{\n    //               width: \"70px\",\n    //               borderRadius: \"5px\",\n    //               background: \"green\",\n    //               borderStyle: \"none\",\n    //               padding: \"5px\",\n    //               color: \"white\"\n    //             }}\n    //             onClick={this.onSubmitRegister}\n    //           >\n    //             Register\n    //           </button>\n    //           <br />\n    //           or <br />\n    //           <div>\n    //             <span>Already registered </span>\n    //             <Link\n    //               style={{ color: \"#f4a941\", fontWeight: \"bold\" }}\n    //               to={\"/login\"}\n    //             >\n    //               Login\n    //             </Link>\n    //             <span> from here</span>\n    //             <br />\n    //           </div>\n    //           <br />\n    //         </div>\n    //       </div>\n    //     </form>\n    //   </div>\n    // );\n\n    let registrationPage = (\n      <form>\n        <h3>\n          <strong>Register Page</strong>\n        </h3>\n        {error ? (\n          <div>\n            <p style={{ color: \"red\" }}>{error.message}</p>\n          </div>\n        ) : null}\n        {formElementsArray.map(formElement => (\n          <Input\n            key={formElement.id}\n            label={formElement.id}\n            elementType={formElement.config.elementType}\n            elementConfig={formElement.config.elementConfig}\n            value={formElement.config.value}\n            changed={event => this.inputChangedHandler(event, formElement.id)}\n          />\n        ))}\n        {/* <Button btnType=\"Success\">ORDER</Button> */}\n        <button\n          style={{\n            width: \"70px\",\n            borderRadius: \"5px\",\n            background: \"green\",\n            borderStyle: \"none\",\n            padding: \"5px\",\n            color: \"white\"\n          }}\n          onClick={this.onSubmitLogin}\n        >\n          Login\n        </button>\n      </form>\n    );\n\n    if (loading) {\n      registrationPage = <Spinner />;\n    }\n\n    return <Fragment>{registrationPage}</Fragment>;\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    registration: state.authState\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onInputChange: e =>\n      dispatch({\n        type: \"onChange\",\n        name: e.target.name,\n        value: e.target.value\n      })\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Register);\n"]},"metadata":{},"sourceType":"module"}